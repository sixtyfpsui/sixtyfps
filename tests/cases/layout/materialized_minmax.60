/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
// Test the propagation of maximum and minimum size through nested grid layouts

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;

    rect := Rectangle {

        layout := HorizontalLayout {
            spacing: 0phx;
            padding: 0phx;
            Rectangle {
                background: blue;
                maximum-height: 300phx;
                maximum-width: 300phx;
                minimum-height: 25phx;
            }
            VerticalLayout {
                spacing: 0phx;
                padding: 0phx;
                Rectangle {
                    background: red;
                    minimum-width: 50phx;
                }
                Rectangle {
                    background: green;
                }
            }
        }
    }

    property<int> materialized_maximum_width: layout.maximum-width / 1phx;
    property<int> materialized_maximum_height: layout.maximum-height / 1phx;
    property<int> materialized_minimum_width: layout.minimum-width / 1phx;
    property<int> materialized_minimum_height: layout.minimum-height / 1phx;

    property<int> materialized_rect_maximum_width: rect.maximum-width / 1phx;
    property<int> materialized_rect_maximum_height: rect.maximum-height / 1phx;
    property<int> materialized_rect_minimum_width: rect.minimum-width / 1phx;
    property<int> materialized_rect_minimum_height: rect.minimum-height / 1phx;
}

/*

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
sixtyfps::testing::send_mouse_click(&instance, 5., 5.);
assert_eq(instance.get_materialized_maximum_height(), 300);
assert_eq(instance.get_materialized_minimum_width(), 50);
assert_eq(instance.get_materialized_minimum_height(), 25);
// FIXME! float max is overflowing on int
assert_eq(uint32_t(instance.get_materialized_maximum_width()), uint32_t(std::numeric_limits<int>::max()) + 1);

assert_eq(instance.get_materialized_rect_maximum_height(), 300);
assert_eq(instance.get_materialized_rect_minimum_width(), 50);
assert_eq(instance.get_materialized_rect_minimum_height(), 25);
// FIXME! float max is overflowing on int
assert_eq(uint32_t(instance.get_materialized_rect_maximum_width()), uint32_t(std::numeric_limits<int>::max()) + 1);
```


```rust
let instance = TestCase::new();
sixtyfps::testing::send_mouse_click(&instance, 5., 5.);
assert_eq!(instance.get_materialized_maximum_height(), 300);
assert_eq!(instance.get_materialized_minimum_width(), 50);
assert_eq!(instance.get_materialized_minimum_height(), 25);
assert_eq!(instance.get_materialized_maximum_width(), i32::MAX);

assert_eq!(instance.get_materialized_rect_maximum_height(), 300);
assert_eq!(instance.get_materialized_rect_minimum_width(), 50);
assert_eq!(instance.get_materialized_rect_minimum_height(), 25);
assert_eq!(instance.get_materialized_rect_maximum_width(), i32::MAX);

```

```js
var instance = new sixtyfps.TestCase();
instance.send_mouse_click(5., 5.);
assert.equal(instance.materialized_maximum_height, 300);
assert.equal(instance.materialized_minimum_width, 50);
assert.equal(instance.materialized_minimum_height, 25);
assert.equal(instance.materialized_maximum_width, Math.pow(2, 31) - 1);

assert.equal(instance.materialized_rect_maximum_height, 300);
assert.equal(instance.materialized_rect_minimum_width, 50);
assert.equal(instance.materialized_rect_minimum_height, 25);
assert.equal(instance.materialized_rect_maximum_width, Math.pow(2, 31) - 1);
```

*/